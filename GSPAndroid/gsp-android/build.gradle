buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

group = 'com.gdevelop.gwt.syncrpc'
version = '0.6.2'
def projectName = 'Gwt-SyncProxy Android Library'
def projectUrl = 'http://www.blueesoteric.com'
def licenseName = 'The Apache Software License, Version 2.0'
def licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
def devId = 'P.Prith'
def devName = 'Preethum Prithviraj'
def devEmail = 'p.prith@blueesoteric.com'

android {
    compileSdkVersion sdkVer
    buildToolsVersion buildToolsVer

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion sdkVer
        versionCode 2
        versionName version
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

repositories{
    mavenCentral()
    mavenLocal()
}

preBuild.dependsOn tasks.getByPath(":gspgwtuser:gwtUserJar")

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:appcompat-v7:$androidSupportVer"
    compile 'com.gdevelop.gwt.syncrpc:gsp-java:0.6.1'
    compile 'com.google.android.gms:play-services-identity:8.3.0'
    compile files('../gspgwtuser/build/libs/GSPGwtUserAndroid.jar')
}
//
//task androidJar(type: Jar) {
//    //baseName = 'syncproxy'
//    from files('build/intermediates/classes/debug/')
//    //from files('../gspgwtuser/build/libs/GSPGwtUserAndroid.jar')
//    from(zipTree('../gspgwtuser/build/libs/GSPGwtUserAndroid.jar')){
//        include '**'
//    }
////    configurations.compile.filter({ include '*gsp*' }).each{
////        println it
////    }
////    from({zipTree(configurations.compile.filter({file -> if(file.name.contains('gsp')){return true}}).singleFile)}){
////        include '**/syncrpc/**'
////    }
//
//    def gspPath = project.configurations.compile.find { it.name.startsWith("gsp") }
//    from(zipTree(gspPath)){
//        include '**/syncrpc/**'
//    }
//}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    from files('../gspgwtuser/build/libs/GSPGwtUserAndroid.jar')
    classifier = 'sources'
}

//task javadoc(type: Javadoc) {
//    source = android.sourceSets.main.java.srcDirs
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//}

//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}


install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'

                // Add your description here
                name projectName
                url projectUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id devId
                        name devName
                        email devEmail
                    }
                }

            }
        }
    }
}

artifacts {
    //archives androidJar
//    archives javadocJar
    archives sourcesJar
}
//
//apply plugin: 'maven-publish'
//
//publishing {
//    publications {
//        gspAndroid(MavenPublication) {
//            groupId 'com.gdevelop.gwt.syncrpc'
//            artifactId 'gsp-android'
//            version gspVer
//            //asNode().appendNode('packaging','aar')
//
//            artifact androidJar
//            artifact sourcesJar {
//                classifier "sources"
//            }
//            artifact gspJavadocJar {
//                classifier 'javadoc'
//            }
            // Work-around for missing dependencies: http://stackoverflow.com/a/24764713/1544046
//            pom.withXml {
//                def dependenciesNode = asNode().appendNode('dependencies')
//
//                // Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
//                configurations.compile.allDependencies.each {
//                    // Handle skipping over the manually added testing files jar
//                    if (!(it instanceof org.gradle.api.internal.artifacts.dependencies.DefaultSelfResolvingDependency_Decorated)) {
//                        def dependencyNode = dependenciesNode.appendNode('dependency')
//                        dependencyNode.appendNode('groupId', it.group)
//                        dependencyNode.appendNode('artifactId', it.name)
//                        dependencyNode.appendNode('version', it.version)
//                    }
//                }
//            }

//        }
//    }
//}